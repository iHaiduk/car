// Generated by CoffeeScript 1.8.0
(function() {
  var bytesToSize, hideLoad;

  (function($, window, document) {
    $(function() {
      var bar, drop, progressbar, select;
      progressbar = $("#progressbar");
      bar = progressbar.find(".progress-bar");
      select = new $.upload.select($("#upload-select"));
      drop = new $.upload.drop($("#upload-drop"));
    });
  })(jQuery, window, document);

  (function($, window, document) {
    var UploadDrop, UploadSelect, fl_arrray, fl_count_load, fl_k, matchName, xhrupload;
    fl_k = 0;
    fl_count_load = 0;
    fl_arrray = $(document).find("#files");
    xhrupload = function(files, settings) {
      var complete, count, file, i, upload, uploaded;
      upload = function(files, settings) {
        var f, formData, i, p, xhr;
        if (fl_count_load > 4) {
          return false;
        }
        formData = new FormData();
        xhr = new XMLHttpRequest();
        if (settings.before(settings, files) === false) {
          return;
        }
        i = 0;
        f = void 0;
        while (f = files[i]) {
          formData.append(settings.param, f);
          i++;
        }
        for (p in settings.params) {
          formData.append(p, settings.params[p]);
        }
        xhr.upload.addEventListener("progress", (function(e) {
          var percent;
          percent = (e.loaded / e.total) * 100;
          settings.progress(percent, e);
        }), false);
        xhr.addEventListener("loadstart", (function(e) {
          settings.loadstart(e);
        }), false);
        xhr.addEventListener("load", (function(e) {
          settings.load(e);
        }), false);
        xhr.addEventListener("loadend", (function(e) {
          settings.loadend(e);
        }), false);
        xhr.addEventListener("error", (function(e) {
          settings.error(e);
        }), false);
        xhr.addEventListener("abort", (function(e) {
          settings.abort(e);
        }), false);
        xhr.open(settings.method, settings.action, true);
        xhr.onreadystatechange = function() {
          var e, response;
          settings.readystatechange(xhr);
          if (xhr.readyState === 4) {
            response = xhr.responseText;
            if (settings.type === "json") {
              try {
                response = $.parseJSON(response);
              } catch (_error) {
                e = _error;
                response = false;
              }
            }
            settings.complete(response, xhr);
          }
        };
        xhr.send(formData);
      };
      if (!$.support.ajaxupload) {
        return this;
      }
      settings = $.extend({}, xhrupload.defaults, settings);
      if (!files.length) {
        return;
      }
      if (settings.allow !== "*.*") {
        i = 0;
        file = void 0;
        while (file = files[i]) {
          if (!matchName(settings.allow, file.name)) {
            if (typeof settings.notallowed === "string") {
              alert(settings.notallowed);
            } else {
              settings.notallowed(file, settings);
            }
            return;
          }
          i++;
        }
      }
      complete = settings.complete;
      if (settings.single) {
        count = files.length;
        uploaded = 0;
        settings.complete = function(response, xhr) {
          uploaded = uploaded + 1;
          complete(response, xhr);
          if (uploaded < count) {
            upload([files[uploaded]], settings);
          } else {
            settings.allcomplete(response, xhr);
          }
        };
        upload([files[0]], settings);
      } else {
        settings.complete = function(response, xhr) {
          complete(response, xhr);
          settings.allcomplete(response, xhr);
        };
        upload(files, settings);
      }
    };
    matchName = function(pattern, path) {
      var parsedPattern;
      parsedPattern = "^" + pattern.replace(/\//g, "\\/").replace(/\*\*/g, "(\\/[^\\/]+)*").replace(/\*/g, "[^\\/]+").replace(/((?!\\))\?/g, "$1.") + "$";
      parsedPattern = "^" + parsedPattern + "$";
      return path.match(new RegExp(parsedPattern)) !== null;
    };
    UploadSelect = function(element, options) {
      var $element, $this;
      $this = this;
      $element = $(element);
      options = $.extend({}, xhrupload.defaults, UploadSelect.defaults, options);
      if ($element.data("uploadSelect")) {
        return;
      }
      this.element = $element.on("change", function() {
        xhrupload($this.element[0].files, options);
      });
      $element.data("uploadSelect", this);
    };
    UploadSelect.defaults = {};
    UploadDrop = function(element, options) {
      var $element, $this, hasdragCls;
      $this = this;
      $element = $(element);
      options = $.extend({}, xhrupload.defaults, UploadDrop.defaults, options);
      hasdragCls = false;
      if ($element.data("uploadDrop")) {
        return;
      }
      $element.on("drop", function(e) {
        if (e.dataTransfer && e.dataTransfer.files) {
          e.stopPropagation();
          e.preventDefault();
          $element.removeClass(options.dragoverClass);
          xhrupload(e.dataTransfer.files, options);
        }
      }).on("dragenter", function(e) {
        e.stopPropagation();
        e.preventDefault();
      }).on("dragover", function(e) {
        e.stopPropagation();
        e.preventDefault();
        if (!hasdragCls) {
          $element.addClass(options.dragoverClass);
          hasdragCls = true;
        }
      }).on("dragleave", function(e) {
        e.stopPropagation();
        e.preventDefault();
        $element.removeClass(options.dragoverClass);
        hasdragCls = false;
      });
      $element.data("uploadDrop", this);
    };
    UploadDrop.defaults = {
      dragoverClass: "dragover"
    };
    $.upload = {
      select: UploadSelect,
      drop: UploadDrop
    };
    $.support.ajaxupload = (function() {
      var supportAjaxUploadProgressEvents, supportFileAPI, supportFormData;
      supportFileAPI = function() {
        var fi;
        fi = document.createElement("INPUT");
        fi.type = "file";
        return "files" in fi;
      };
      supportAjaxUploadProgressEvents = function() {
        var xhr;
        xhr = new XMLHttpRequest();
        return !!(xhr && ("upload" in xhr) && ("onprogress" in xhr.upload));
      };
      supportFormData = function() {
        return !!window.FormData;
      };
      return supportFileAPI() && supportAjaxUploadProgressEvents() && supportFormData();
    })();
    if ($.support.ajaxupload) {
      $.event.props.push("dataTransfer");
    }
    xhrupload.defaults = {
      action: "/upload/file",
      single: true,
      method: "POST",
      param: "files",
      params: {},
      allow: "*.(jpg|jpeg|gif|png|txt|doc|docx)",
      type: "text",
      before: function(o, files) {
        var file, html;
        hideLoad(fl_count_load);
        file = files[0];
        html = $('<div class="panel widget"> <div class="row row-table row-flush"> <div class="col-xs-2 bg-info text-center"> <em class="fa fa-file-text-o fa-2x"></em> </div> <div class="col-xs-9"> <div class="panel-body text-center"> <h4 class="mt0">' + file.name.substr(0, file.name.lastIndexOf('.')) + '</h4> <small> <em class="fa fa-inbox"></em>' + bytesToSize(parseInt(file.size)) + '<em class="fa fa-info"></em>' + file.type + '</small> </div> <div class="progress progress-striped progress-xs active"> <div role="progressbar" aria-valuenow="0" aria-valuemin="0" style="width: 0%" aria-valuemax="100" class="progress-bar progress-bar-info"> </div> </div> </div> <div class="col-xs-1 bg-inverse text-center delete_file"> <em class="fa fa-minus"></em> </div> </div> </div>');
        fl_arrray.append(html);
      },
      load: function() {},
      loadend: function() {},
      error: function() {},
      abort: function() {},
      complete: function(response, xhr) {
        console.log("complete", response, xhr);
        fl_count_load++;
        hideLoad(fl_count_load);
      },
      loadstart: function(e) {
        console.log("loadstart", e);
      },
      progress: function(percent, e) {
        var file_l, progress_b;
        file_l = fl_arrray.find(".panel")[fl_k];
        progress_b = $(file_l).find(".progress-bar");
        progress_b.attr("aria-valuenow", percent).css("width", percent + "%");
        if (percent === 100) {
          progress_b.parent().slideUp(500);
          fl_k++;
        }
      },
      allcomplete: function(response, xhr) {
        console.log("allcomplete", response, xhr);
      },
      readystatechange: function() {},
      notallowed: function(file, settings) {}
    };
    $.xhrupload = xhrupload;
    xhrupload;
    return $(document).delegate(".delete_file", "click", function() {
      $(this).parents(".panel").slideUp(500);
      if (fl_count_load > 0) {
        fl_count_load--;
      }
      return hideLoad(fl_count_load);
    });
  })(jQuery, window, document);

  hideLoad = function(cnt_upl) {
    var upload_drp;
    upload_drp = $(document).find("#upload-drop");
    if (cnt_upl > 4) {
      return upload_drp.stop().slideUp(500);
    } else {
      return upload_drp.stop().slideDown(500);
    }
  };

  bytesToSize = function(bytes) {
    var i, sizes;
    sizes = ["Bytes", "KB", "MB"];
    if (bytes === 0) {
      return "0 Byte";
    }
    i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
    return Math.round(bytes / Math.pow(1024, i), 2) + " " + sizes[i];
  };

}).call(this);
